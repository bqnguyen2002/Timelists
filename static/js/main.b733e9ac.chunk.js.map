{"version":3,"sources":["timelistComponents/TimelistsForm.js","timelistComponents/Timelists.js","timelistComponents/TimelistsContainer.js","components/App.js","index.js"],"names":["TimelistsForm","props","useState","input","setInput","className","labelText","size","onChange","e","target","value","inputValue","onKeyPress","event","key","length","handleFormInput","width","labelColor","Timelists","playShake","setplayShake","time","setTime","TimelistModal","setTimelistModal","Timelist","setTimelist","showModal","setShowModal","handleCloseModal","Date","startDate","setStartDate","endDate","setEndDate","dates","start","end","addTimelistItem","title","displayTime","convertFieldtoMs","setTimeout","handleChange","onTimeChange","useEffect","console","log","displayTimefromField","parseInt","substring","Container","Col","style","marginLeft","marginBottom","textAlign","paddingBottom","onClick","fontFamily","fontSize","fontWeight","borderBottom","map","Modal","show","onHide","aria-labelledby","centered","scrollable","Header","closeButton","Title","Body","selected","selectsRange","inline","showSeconds","border","padding","color","borderRadius","TimelistItem","index","initialTime","direction","formatValue","TimelistIndex","copyTimelist","splice","removeTimelistItem","Days","Hours","Minutes","Seconds","TimelistsContainer","StoreTimelists","eachTimeList","display","marginTop","App","TimeLists","setTimelists","formInput","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b733e9ac.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { PrettyInputText } from \"react-pretty-input\";\r\nimport \"../components/App.css\";\r\n\r\nexport default function TimelistsForm(props) {\r\n  const [input, setInput] = useState(\"\");\r\n\r\n  const handleKeyPress = (event) => {\r\n    if (event.key === \"Enter\") {\r\n      if (input.length !== 0) props.handleFormInput(input);\r\n      setInput(\"\");\r\n    }\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    setInput(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"title\">Track how long events last</div>\r\n      <div className=\"subtitle\">\r\n        School, Birthdays, Homework, Tests, Quizzes\r\n      </div>\r\n      <div className=\"centerforminput\">\r\n        <PrettyInputText\r\n          labelText=\"make a new Timelist!\"\r\n          size=\"20\"\r\n          onChange={handleChange}\r\n          inputValue={input}\r\n          onKeyPress={handleKeyPress}\r\n          width=\"255\"\r\n          labelColor=\"#5b617c\"\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Modal, Container, Col } from \"react-bootstrap\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport TimeField from \"react-simple-timefield\";\r\nimport Timer from \"react-compound-timer\";\r\nimport { PrettyInputText } from \"react-pretty-input\";\r\nimport \"../components/App.css\";\r\n\r\nexport default function Timelists(props) {\r\n  const [playShake, setplayShake] = useState(false);\r\n  const [time, setTime] = useState(\"00:00:00\");\r\n  const [TimelistModal, setTimelistModal] = useState([]);\r\n  const [Timelist, setTimelist] = useState([]);\r\n  const [input, setInput] = useState(\"\");\r\n  const [showModal, setShowModal] = useState(false);\r\n  const handleCloseModal = () => setShowModal(false);\r\n  const [startDate, setStartDate] = useState(new Date());\r\n  const [endDate, setEndDate] = useState(null);\r\n  const onChange = (dates) => {\r\n    const [start, end] = dates;\r\n    setStartDate(start);\r\n    setEndDate(end);\r\n  };\r\n\r\n  const addTimeListModal = () => {\r\n    setTimelistModal([...TimelistModal, {}]);\r\n    setShowModal(true);\r\n  };\r\n\r\n  const removeTimelistItem = (TimelistIndex) => {\r\n    var copyTimelist = [...Timelist]; // make a separate copy of the array\r\n    if (copyTimelist.length !== 0) {\r\n      copyTimelist.splice(TimelistIndex, 1);\r\n      setTimelist(copyTimelist);\r\n    }\r\n  };\r\n\r\n  const addTimelistItem = () => {\r\n    if (input.length !== 0 && time !== \"00:00:00\" && endDate === null) {\r\n      setTimelist([\r\n        ...Timelist,\r\n        { title: input, displayTime: convertFieldtoMs(time) },\r\n      ]);\r\n      setShowModal(false);\r\n      setInput(\"\");\r\n      setTime(\"00:00:00\");\r\n      setStartDate(new Date());\r\n      setEndDate(null);\r\n    } else if (input.length !== 0 && time === \"00:00:00\" && endDate !== null) {\r\n      setTimelist([\r\n        ...Timelist,\r\n        {\r\n          title: input,\r\n          displayTime: endDate - startDate,\r\n        },\r\n      ]);\r\n      setShowModal(false);\r\n      setInput(\"\");\r\n      setTime(\"00:00:00\");\r\n      setStartDate(new Date());\r\n      setEndDate(null);\r\n    } else {\r\n      setplayShake(true);\r\n      setInput(\"\");\r\n      setTime(\"00:00:00\");\r\n      setStartDate(new Date());\r\n      setEndDate(null);\r\n      if (playShake === false) {\r\n        setTimeout(() => {\r\n          setplayShake(false);\r\n        }, 500);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    setInput(e.target.value);\r\n  };\r\n\r\n  const onTimeChange = (e) => {\r\n    setTime(e.target.value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(Timelist);\r\n  }, [Timelist]);\r\n\r\n  const convertFieldtoMs = (displayTimefromField) => {\r\n    var hourstoMilli = parseInt(displayTimefromField.substring(0, 2)) * 3600000;\r\n    var minutestoMilli = parseInt(displayTimefromField.substring(3, 5)) * 60000;\r\n    var secondstoMilli = parseInt(displayTimefromField.substring(6, 8)) * 1000;\r\n    return hourstoMilli + minutestoMilli + secondstoMilli;\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Col>\r\n        <Container\r\n          style={{\r\n            marginLeft: \"-100px\",\r\n            marginBottom: \"-10px\",\r\n          }}\r\n        >\r\n          <Col style={{ width: \"333px\" }}>\r\n            <div\r\n              className=\"fade-in\"\r\n              style={{\r\n                textAlign: \"center\",\r\n                paddingBottom: \"20px\",\r\n              }}\r\n            ></div>\r\n          </Col>\r\n          <Col>\r\n            <span onClick={addTimeListModal} className=\"plus-icon\"></span>\r\n            <div\r\n              className=\"fade-in\"\r\n              style={{\r\n                textAlign: \"center\",\r\n                fontFamily: \"sans-serif\",\r\n                fontSize: 20,\r\n                fontWeight: \"bold\",\r\n                borderBottom: \"1px solid rgb(212, 212, 212)\",\r\n              }}\r\n            >\r\n              {props.title}\r\n            </div>\r\n            <Col></Col>\r\n          </Col>\r\n        </Container>\r\n        {TimelistModal.map(() => (\r\n          <Modal\r\n            show={showModal}\r\n            onHide={handleCloseModal}\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            centered\r\n            className={playShake ? \"wrong-input\" : \"\"}\r\n            scrollable={false}\r\n          >\r\n            <Modal.Header closeButton>\r\n              <Modal.Title>\r\n                <div className=\"center-modalInput\">\r\n                  <PrettyInputText\r\n                    labelText=\"Title your event...\"\r\n                    onChange={handleChange}\r\n                    inputValue={input}\r\n                    size=\"13\"\r\n                    width=\"300\"\r\n                    labelColor=\"#5b617c\"\r\n                  />\r\n                </div>\r\n              </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body style={{ textAlign: \"center\" }}>\r\n              <div>Pick the day when the event ends</div>\r\n              <br></br>\r\n              <DatePicker\r\n                selected={startDate}\r\n                onChange={onChange}\r\n                startDate={startDate}\r\n                endDate={endDate}\r\n                selectsRange\r\n                inline\r\n              />\r\n              <div className=\"separator\">or</div>\r\n              <div>Choose if your event ends in less than 24 hours</div>\r\n              <br></br>\r\n              <TimeField\r\n                value={time}\r\n                onChange={onTimeChange}\r\n                showSeconds=\"true\"\r\n                style={{\r\n                  border: \"2px solid #666\",\r\n                  fontSize: 42,\r\n                  width: 250,\r\n                  padding: \"5px 8px\",\r\n                  color: \"#333\",\r\n                  borderRadius: 3,\r\n                }}\r\n              />\r\n              <br></br>\r\n              <br></br>\r\n              <button className=\"complete-button\" onClick={addTimelistItem}>\r\n                complete\r\n              </button>\r\n            </Modal.Body>\r\n          </Modal>\r\n        ))}\r\n        {Timelist.map((TimelistItem, index) => (\r\n          <div>\r\n            <Timer\r\n              initialTime={TimelistItem.displayTime}\r\n              direction=\"backward\"\r\n              formatValue={(value) => `${value < 10 ? `0${value}` : value}`}\r\n            >\r\n              {() => (\r\n                <div className=\"clock-container\">\r\n                  <div className=\"center-list-title\">\r\n                    {TimelistItem.title}\r\n                    <span\r\n                      onClick={() => removeTimelistItem(index)}\r\n                      className=\"x-icon\"\r\n                    ></span>\r\n                  </div>\r\n                  <Timer.Days />\r\n                  <span className=\"colon-space\"></span>\r\n                  <span className=\"colon-color\">:</span>\r\n                  <span className=\"colon-space\"></span>\r\n                  <Timer.Hours />\r\n                  <span className=\"colon-space\"></span>\r\n                  <span className=\"colon-color\">:</span>\r\n                  <span className=\"colon-space\"></span>\r\n                  <Timer.Minutes />\r\n                  <span className=\"colon-space\"></span>\r\n                  <span className=\"colon-color\">:</span>\r\n                  <span className=\"colon-space\"></span>\r\n                  <Timer.Seconds />\r\n                  <p className=\"clock-label\">\r\n                    &nbsp;DAYS&ensp;&emsp;&emsp;&emsp;&emsp;&nbsp;&nbsp;\r\n                    HOURS&emsp;&emsp;&emsp;&emsp;&nbsp;\r\n                    MINUTES&emsp;&emsp;&emsp;&nbsp; SECONDS\r\n                  </p>\r\n                </div>\r\n              )}\r\n            </Timer>\r\n          </div>\r\n        ))}\r\n      </Col>\r\n    </Container>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Timelists from \"./Timelists\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nexport default function TimelistsContainer(props) {\r\n  return (\r\n    <div>\r\n      {props.StoreTimelists.map((eachTimeList, index) => (\r\n        <div\r\n          style={{\r\n            display: \"inline-block\",\r\n            marginLeft: \"180px\",\r\n            marginTop: \"100px\",\r\n          }}\r\n        >\r\n          <Timelists title={eachTimeList.title} />\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\nimport TimelistsForm from \"../timelistComponents/TimelistsForm\";\nimport TimelistsContainer from \"../timelistComponents/TimelistsContainer\";\nimport \"./App.css\";\n\nexport default function App() {\n  const [TimeLists, setTimelists] = useState([]);\n\n  const ReceiveformInput = (formInput) => {\n    setTimelists([...TimeLists, { title: formInput }]);\n  };\n\n  return (\n    <>\n      <TimelistsForm handleFormInput={ReceiveformInput} />\n      <TimelistsContainer StoreTimelists={TimeLists} />\n    </>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"../src/components/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}